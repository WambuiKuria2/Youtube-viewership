<?xml version="1.0"?>
<AlteryxDocument yxmdVer="2019.4">
  <Nodes>
    <Node ToolID="1">
      <GuiSettings Plugin="JupyterCode">
        <Position x="54" y="54" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <productionModeScript><![CDATA[#################################
# List all non-standard packages to be imported by your 
# script here (only missing packages will be installed)
from ayx import Package
Package.installPackages(['xlrd','xlwt', 'openpyxl', 'xlsxwriter'])


#################################
from ayx import Alteryx
import os
import re
import pandas as pd
import numpy as np


#################################
statements_order = pd.DataFrame([
    ["Income Statement",1],["Balance Sheet",2],
    ["Actuarial Estimates",3],["CSM",4],
    ["Loss Component",5]
], columns=["Name", "order"])



#################################
dir_ = Alteryx.getWorkflowConstant("Engine.WorkflowDirectory")



all_files  = os.listdir(dir_ + '/outputs')
relevant_files = [name for name in all_files if re.match('.*\s[0-9]{4}\_[0-9]+',name) is not None]


#################################


## File must be xlsx
imported_files = []
for file in relevant_files:
  
    df = pd.read_excel(dir_ + '/outputs/' + file, sheet_name='sheet1')
    
    #create a statement type column and fill it
    original_columns = df.columns.to_list()
    df.iloc[0,0] = original_columns[0]
    df.iloc[:,0] = df.iloc[:,0].ffill()
    original_columns[0] = 'StatementType'
    df.columns = original_columns
    
    
    policyName = re.sub('[0-9]{4}\_[0-9]+','',file.replace('.xlsx', ''))
    name_list = [policyName, file.replace(policyName,'').replace('.xlsx', '')]
    #file.replace('.xlsx', '').split(' ')
    
    year_rf = name_list[1].split('_')
    rf = int(year_rf[1])
    year = int(year_rf[0])
    df['Policy'] = name_list[0]
    
    df.loc[:, 'aggrYear']=df.loc[:, 'Year']= year
    df['rfCount'] = rf
    df['rfName'] = str(year)
    if rf!=0:
        df['rfName'] = str(year) + '_rf' + str(year+rf)[-2:]
        df['aggrYear'] = year+rf

    imported_files.append(df)

results = pd.concat(imported_files, sort=True)

results = results.merge(right=statements_order,left_on="StatementType", right_on="Name", how="left", suffixes=('','_y'))
results['StatementType'] = results.apply(func=lambda x: str(x['order']) + '. ' + x['StatementType'],
                                         axis=1)



#################################
results = results.loc[results['Name']!='Name',:]
results = results.astype({'Inception':np.float64, 
                'Movement Due to Experience Variance':np.float64,
               'Movement Due to Year End View':np.float64,
                         'Year End View':np.float64})
#results.columns


#################################
aggrPolicy = results.groupby(by=['Policy', 'aggrYear', 'StatementType','Name'], as_index=False)['Inception', 
                'Movement Due to Experience Variance',
               'Movement Due to Year End View', 'Year End View'].sum()
_ = Alteryx.write(aggrPolicy, 2)
aggrPolicy.loc[:,'rfName'] = 'Policy Aggregate YearEnd'

aggrOverall =  results.groupby(by=['aggrYear', 'StatementType','Name'], as_index=False)['Inception', 
                'Movement Due to Experience Variance',
               'Movement Due to Year End View', 'Year End View'].sum()

aggrbyRollFoward =  results.groupby(by=['aggrYear','rfName', 'StatementType','Name'], as_index=False)['Inception', 
                'Movement Due to Experience Variance',
               'Movement Due to Year End View', 'Year End View'].sum()

aggrOverall.loc[:,'rfName'] = 'Overall Aggregate YearEnd'
aggrOverall.loc[:,'Policy'] =aggrbyRollFoward.loc[:,'Policy']  = 'All Policies'

aggrOverall = pd.concat([aggrbyRollFoward,aggrOverall],sort=True)

results = pd.concat([results, aggrPolicy], sort=True)



#################################
#from openpyxl import load_workbook


output_file = dir_ + '/outputs/aggregated.xlsx'

##trigger file replacement
pd.DataFrame([0]).to_excel(output_file)

def transformAndWrite(df, sheet_name):
    aggregation = df.pivot_table(index=['Policy', 'StatementType','Name'], columns=['aggrYear', 'rfName'], 
                  values=['Inception', 
                    'Movement Due to Experience Variance',
                   'Movement Due to Year End View', 'Year End View'])
    aggregation = aggregation.swaplevel(axis=1, i=0, j=1).swaplevel(axis=1, i=2, j=1).sort_index(axis=1,level=[0,1], sort_remaining=False)
    
    
    with pd.ExcelWriter(output_file,engine='xlsxwriter') as writer:
        
        book = writer.book
        aggregation.to_excel(writer, sheet_name=sheet_name)
        
        format_ = book.add_format()
        format_.set_align('left')
        worksheet = writer.sheets[sheet_name]
        worksheet.set_column('A:C',None, format_)
        
        writer.save()
    return aggregation


results = transformAndWrite(results, 'Agg. by Policy')
aggrOverall = transformAndWrite(aggrOverall, 'Overal Agg.')


#################################
]]></productionModeScript>
          <Notebook><![CDATA[{"cells":[{"cell_type":"markdown","metadata":{"ayx":{"cell_class":"text_cell","cell_css":"border: 3px solid #357; margin: 4px; background: #fbffff","cell_type":"markdown","contents_keyword":"Alteryx.help()","first_line":"Run `Alteryx.help()` for info about useful functions.","label":"info"}},"source":["Run `Alteryx.help()` for info about useful functions.  \n","i.e., `Alteryx.read(\"#1\")`, `Alteryx.write(df,1)`, `Alteryx.getWorkflowConstant(\"Engine.WorkflowDirectory\")`"]},{"cell_type":"code","execution_count":1,"metadata":{"ayx":{"cell_class":"code_cell","cell_css":"border: 1px solid #58a; margin: 2px;","cell_type":"code","contents_keyword":"installPackages","first_line":"# List all non-standard packages to be imported by your","label":"deps"}},"outputs":[],"source":["# List all non-standard packages to be imported by your \n","# script here (only missing packages will be installed)\n","from ayx import Package\n","Package.installPackages(['xlrd','xlwt', 'openpyxl', 'xlsxwriter'])"]},{"cell_type":"code","execution_count":2,"metadata":{},"outputs":[],"source":["from ayx import Alteryx\n","import os\n","import re\n","import pandas as pd\n","import numpy as np"]},{"cell_type":"code","execution_count":3,"metadata":{},"outputs":[],"source":["statements_order = pd.DataFrame([\n","    [\"Income Statement\",1],[\"Balance Sheet\",2],\n","    [\"Actuarial Estimates\",3],[\"CSM\",4],\n","    [\"Loss Component\",5]\n","], columns=[\"Name\", \"order\"])\n"]},{"cell_type":"code","execution_count":4,"metadata":{},"outputs":[],"source":["dir_ = Alteryx.getWorkflowConstant(\"Engine.WorkflowDirectory\")\n","\n","\n","\n","all_files  = os.listdir(dir_ + '/outputs')\n","relevant_files = [name for name in all_files if re.match('.*\\s[0-9]{4}\\_[0-9]+',name) is not None]"]},{"cell_type":"code","execution_count":5,"metadata":{},"outputs":[],"source":["\n","\n","## File must be xlsx\n","imported_files = []\n","for file in relevant_files:\n","  \n","    df = pd.read_excel(dir_ + '/outputs/' + file, sheet_name='sheet1')\n","    \n","    #create a statement type column and fill it\n","    original_columns = df.columns.to_list()\n","    df.iloc[0,0] = original_columns[0]\n","    df.iloc[:,0] = df.iloc[:,0].ffill()\n","    original_columns[0] = 'StatementType'\n","    df.columns = original_columns\n","    \n","    \n","    policyName = re.sub('[0-9]{4}\\_[0-9]+','',file.replace('.xlsx', ''))\n","    name_list = [policyName, file.replace(policyName,'').replace('.xlsx', '')]\n","    #file.replace('.xlsx', '').split(' ')\n","    \n","    year_rf = name_list[1].split('_')\n","    rf = int(year_rf[1])\n","    year = int(year_rf[0])\n","    df['Policy'] = name_list[0]\n","    \n","    df.loc[:, 'aggrYear']=df.loc[:, 'Year']= year\n","    df['rfCount'] = rf\n","    df['rfName'] = str(year)\n","    if rf!=0:\n","        df['rfName'] = str(year) + '_rf' + str(year+rf)[-2:]\n","        df['aggrYear'] = year+rf\n","\n","    imported_files.append(df)\n","\n","results = pd.concat(imported_files, sort=True)\n","\n","results = results.merge(right=statements_order,left_on=\"StatementType\", right_on=\"Name\", how=\"left\", suffixes=('','_y'))\n","results['StatementType'] = results.apply(func=lambda x: str(x['order']) + '. ' + x['StatementType'],\n","                                         axis=1)\n"]},{"cell_type":"code","execution_count":6,"metadata":{},"outputs":[],"source":["results = results.loc[results['Name']!='Name',:]\n","results = results.astype({'Inception':np.float64, \n","                'Movement Due to Experience Variance':np.float64,\n","               'Movement Due to Year End View':np.float64,\n","                         'Year End View':np.float64})\n","#results.columns"]},{"cell_type":"code","execution_count":7,"metadata":{},"outputs":[],"source":["aggrPolicy = results.groupby(by=['Policy', 'aggrYear', 'StatementType','Name'], as_index=False)['Inception', \n","                'Movement Due to Experience Variance',\n","               'Movement Due to Year End View', 'Year End View'].sum()\n","_ = Alteryx.write(aggrPolicy, 2)\n","aggrPolicy.loc[:,'rfName'] = 'Policy Aggregate YearEnd'\n","\n","aggrOverall =  results.groupby(by=['aggrYear', 'StatementType','Name'], as_index=False)['Inception', \n","                'Movement Due to Experience Variance',\n","               'Movement Due to Year End View', 'Year End View'].sum()\n","\n","aggrbyRollFoward =  results.groupby(by=['aggrYear','rfName', 'StatementType','Name'], as_index=False)['Inception', \n","                'Movement Due to Experience Variance',\n","               'Movement Due to Year End View', 'Year End View'].sum()\n","\n","aggrOverall.loc[:,'rfName'] = 'Overall Aggregate YearEnd'\n","aggrOverall.loc[:,'Policy'] =aggrbyRollFoward.loc[:,'Policy']  = 'All Policies'\n","\n","aggrOverall = pd.concat([aggrbyRollFoward,aggrOverall],sort=True)\n","\n","results = pd.concat([results, aggrPolicy], sort=True)\n"]},{"cell_type":"code","execution_count":8,"metadata":{},"outputs":[],"source":["#from openpyxl import load_workbook\n","\n","\n","output_file = dir_ + '/outputs/aggregated.xlsx'\n","\n","##trigger file replacement\n","pd.DataFrame([0]).to_excel(output_file)\n","\n","def transformAndWrite(df, sheet_name, writer):\n","    aggregation = df.pivot_table(index=['Policy', 'StatementType','Name'], columns=['aggrYear', 'rfName'], \n","                  values=['Inception', \n","                    'Movement Due to Experience Variance',\n","                   'Movement Due to Year End View', 'Year End View'])\n","    aggregation = aggregation.swaplevel(axis=1, i=0, j=1).swaplevel(axis=1, i=2, j=1).sort_index(axis=1,level=[0,1], sort_remaining=False)\n","    \n","\n","    book = writer.book\n","    aggregation.to_excel(writer, sheet_name=sheet_name)\n","\n","    format_ = book.add_format()\n","    format_.set_align('left')\n","    worksheet = writer.sheets[sheet_name]\n","    worksheet.set_column('A:C',None, format_)\n","\n","    return aggregation\n","\n","with pd.ExcelWriter(output_file,engine='xlsxwriter') as writer:\n","    results = transformAndWrite(results, 'Agg. by Policy', writer=writer)\n","    aggrOverall = transformAndWrite(aggrOverall, 'Overal Agg.', writer=writer)\n","    writer.save()"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"jupytertool_venv","language":"python","name":"jupytertool_venv"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"}},"nbformat":4,"nbformat_minor":2}]]></Notebook>
          <Port>63546</Port>
          <WorkflowName>c:\users\rmacharia\documents\engagements\ifrs 17\development\bin\gmm\gmm\aggregateoutput.yxwz</WorkflowName>
          <specialCellMetadata>[{"label":"info","contents_keyword":"Alteryx.help()","cell_css":"border: 3px solid #357; margin: 4px; background: #fbffff","first_line":"Run `Alteryx.help()` for info about useful functions.","cell_type":"markdown","cell_class":"text_cell"},{"label":"deps","contents_keyword":"installPackages","cell_css":"border: 1px solid #58a; margin: 2px;","first_line":"# List all non-standard packages to be imported by your","cell_type":"code","cell_class":"code_cell"}]</specialCellMetadata>
          <AssetManaged>True</AssetManaged>
          <JupyterProduction>False</JupyterProduction>
          <SqliteOverride>false</SqliteOverride>
          <vEnvName />
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
      <EngineSettings EngineDll="AlteryxJupyterPluginEngine.dll" EngineDllEntryPoint="AlteryxJupyter" />
    </Node>
    <Node ToolID="2">
      <GuiSettings Plugin="AlteryxGuiToolkit.Questions.Tab.Tab">
        <Position x="0" y="0" width="59" height="59" />
      </GuiSettings>
      <Properties>
        <Configuration />
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
    </Node>
    <Node ToolID="3">
      <GuiSettings Plugin="AlteryxGuiToolkit.Questions.Label.Label">
        <Position x="0" y="0" width="59" height="59" />
      </GuiSettings>
      <Properties>
        <Configuration />
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
    </Node>
    <Node ToolID="4">
      <GuiSettings Plugin="AlteryxGuiToolkit.Questions.Label.Label">
        <Position x="0" y="0" width="59" height="59" />
      </GuiSettings>
      <Properties>
        <Configuration />
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
    </Node>
    <Node ToolID="6">
      <GuiSettings Plugin="AlteryxGuiToolkit.Questions.Label.Label">
        <Position x="0" y="0" width="59" height="59" />
      </GuiSettings>
      <Properties>
        <Configuration />
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
    </Node>
  </Nodes>
  <Connections />
  <Properties>
    <Memory default="True" />
    <GlobalRecordLimit value="0" />
    <TempFiles default="True" />
    <Annotation on="True" includeToolName="False" />
    <ConvErrorLimit value="10" />
    <ConvErrorLimit_Stop value="False" />
    <CancelOnError value="False" />
    <DisableBrowse value="False" />
    <EnablePerformanceProfiling value="False" />
    <DisableAllOutput value="False" />
    <ShowAllMacroMessages value="False" />
    <ShowConnectionStatusIsOn value="True" />
    <ShowConnectionStatusOnlyWhenRunning value="True" />
    <ZoomLevel value="0" />
    <LayoutType>Vertical</LayoutType>
    <MetaInfo>
      <NameIsFileName value="True" />
      <Name>AggregateOutput</Name>
      <Description />
      <RootToolName />
      <ToolVersion />
      <ToolInDb value="False" />
      <CategoryName />
      <SearchTags />
      <Author />
      <Company />
      <Copyright />
      <DescriptionLink actual="" displayed="" />
      <Example>
        <Description />
        <File />
      </Example>
    </MetaInfo>
    <Events>
      <Enabled value="True" />
    </Events>
    <RuntimeProperties>
      <Actions />
      <Questions>
        <Question>
          <Type>Tab</Type>
          <Description>Questions</Description>
          <Name>Tab (2)</Name>
          <ToolId value="2" />
          <Questions>
            <Question>
              <Type>Label</Type>
              <Description>Instructions:</Description>
              <Name>Label (3)</Name>
              <ToolId value="3" />
            </Question>
            <Question>
              <Type>Label</Type>
              <Description>Results must be in &lt;Policy Name&gt; &lt;Year&gt;_&lt;RollFowardCount&gt;.xlsx</Description>
              <Name>Label (4)</Name>
              <ToolId value="4" />
            </Question>
            <Question>
              <Type>Label</Type>
              <Description>All results must be saved in the output folder</Description>
              <Name>Label (6)</Name>
              <ToolId value="6" />
            </Question>
          </Questions>
        </Question>
      </Questions>
      <ModuleType>Wizard</ModuleType>
      <MacroCustomHelp value="False" />
      <MacroDynamicOutputFields value="False" />
      <MacroImageStd value="0" />
      <MacroInputs />
      <MacroOutputs />
      <Wiz_CustomHelp value="False" />
      <Wiz_CustomGraphic value="False" />
      <Wiz_ShowOutput value="True" />
      <Wiz_OpenOutputTools />
      <Wiz_OutputMessage />
      <Wiz_NoOutputFilesMessage />
      <Wiz_ChainRunWizard />
    </RuntimeProperties>
  </Properties>
</AlteryxDocument>